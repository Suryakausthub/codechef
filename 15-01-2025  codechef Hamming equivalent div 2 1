#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

int countSetBits(int x) {
    int count = 0;
    while (x) {
        count += (x & 1);
        x >>= 1;
    }
    return count;
}

map<int, vector<int>> groupBySetBits(const vector<int>& p) {
    map<int, vector<int>> bitGroups;
    for (int i = 0; i < p.size(); ++i) {
        int setBits = countSetBits(p[i]);
        bitGroups[setBits].push_back(i);
    }
    return bitGroups;
}

void sortValuesWithinGroups(vector<int>& p, const map<int, vector<int>>& bitGroups) {
    for (const auto& [setBits, indices] : bitGroups) {
        vector<int> values;
        for (int idx : indices) {
            values.push_back(p[idx]);
        }
        sort(values.begin(), values.end());
        for (int i = 0; i < indices.size(); ++i) {
            p[indices[i]] = values[i];
        }
    }
}

bool isSorted(const vector<int>& p) {
    for (int i = 1; i < p.size(); ++i) {
        if (p[i] < p[i - 1]) {
            return false;
        }
    }
    return true;
}

void printBitGroups(const map<int, vector<int>>& bitGroups) {
    cout << "Bit Groups:\n";
    for (const auto& [setBits, indices] : bitGroups) {
        cout << "Set Bits: " << setBits << " -> Indices: ";
        for (int idx : indices) {
            cout << idx << " ";
        }
        cout << "\n";
    }
}

bool canBeSorted(vector<int>& p) {
    map<int, vector<int>> bitGroups = groupBySetBits(p);
    sortValuesWithinGroups(p, bitGroups);

    return isSorted(p);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> p(n);
        for (int i = 0; i < n; ++i) {
            cin >> p[i];
        }
        cout << (canBeSorted(p) ? "YES" : "NO") << endl;
    }
    return 0;
}
